<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Argentino's Wrath</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            overflow: hidden;
            background-color: #000;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            color: white;
            font-family: 'Courier New', Courier, monospace;
        }
        canvas {
            display: block;
            background-color: #1a1a1a; /* Fundo um pouco mais claro */
            border: 1px solid #333;
        }
        #introScreen {
            position: absolute;
            background-color: rgba(0, 0, 0, 0.9);
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            font-size: 2em;
        }
        #introText {
            width: 80%;
            max-width: 800px;
        }
        #playButton {
            margin-top: 40px;
            padding: 15px 30px;
            font-size: 1.2em;
            cursor: pointer;
            background-color: #111;
            color: white;
            border: 2px solid white;
            display: none; /* Hidden by default */
        }
        #upgradeScreen {
            position: absolute;
            top: 0; left: 0; width: 100%; height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            display: none;
            flex-direction: column; justify-content: center; align-items: center;
            color: white; text-align: center;
        }
        .upgrade-option {
            border: 2px solid #fff; padding: 20px; margin: 10px;
            cursor: pointer; width: 250px;
        }
        .upgrade-option:hover { background-color: #333; }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    <div id="introScreen">
        <div id="introText"></div>
        <button id="playButton">EXPULS√Å-LOS!</button>
    </div>
    <div id="upgradeScreen">
        <h1>LEVEL UP!</h1>
        <h3>Choose an upgrade:</h3>
        <div id="upgradeChoices"></div>
    </div>

<script>
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');
const introScreen = document.getElementById('introScreen');
const introText = document.getElementById('introText');
const playButton = document.getElementById('playButton');
const upgradeScreen = document.getElementById('upgradeScreen');
const upgradeChoicesContainer = document.getElementById('upgradeChoices');

canvas.width = 1280;
canvas.height = 720;

// --- GAME STATE ---
let gameState = 'intro';
let player;
let enemies = [];
let projectiles = [];
let particles = [];
let wisps = [];
let thunderbolts = [];
let orbs = [];
let platforms = [];
let gameTime = 0;
let keys = {};
let currentUpgradeChoices = [];
let mousePos = { x: 0, y: 0 };
let loopStarted = false;

const GRAVITY = 0.5;
const ENEMY_SPAWN_RATE_INITIAL = 240;

// --- UTILITY FUNCTIONS ---
function random(min, max) { return Math.random() * (max - min) + min; }
function lerp(start, end, amt) { return (1 - amt) * start + amt * end; }
function dist(x1, y1, x2, y2) { return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)); }

// --- UPGRADE SYSTEM ---
const allUpgrades = {
    common: [
        { name: 'Catalyst', desc: 'Projectile Damage +2', rarity: 'common', apply: (p) => { p.stats.projectileDamage += 2; } },
        { name: 'Eyesight', desc: 'Critical Chance +5%', rarity: 'common', apply: (p) => { p.stats.critChance += 0.05; } },
        { name: 'Growth', desc: 'Max. HP +10', rarity: 'common', apply: (p) => { p.stats.maxHp += 10; p.hp += 10; } },
        { name: 'Impulse', desc: 'Jump Height +30%', rarity: 'common', apply: (p) => { p.stats.jumpHeightMultiplier += 0.3; } },
        { name: 'Renew', desc: 'Heal to Max. HP', rarity: 'common', apply: (p) => { p.hp = p.stats.maxHp; } },
        { name: 'Resist', desc: 'Defense +4%', rarity: 'common', apply: (p) => { p.stats.defense += 0.04; } },
        { name: 'Resonance', desc: 'Atk Speed +12%', rarity: 'common', apply: (p) => { p.stats.attackSpeedMultiplier -= 0.12; } },
        { name: 'Souls', desc: 'Chance to drop soul orb 1%', rarity: 'common', apply: (p) => { p.stats.soulOrbChance += 0.01; } },
        { name: 'Stability', desc: 'Projectile takes +1 hit before exploding', rarity: 'common', apply: (p) => { p.stats.projectileHits += 1; } },
        { name: 'Swift', desc: 'Movement Speed +20%', rarity: 'common', apply: (p) => { p.stats.speedMultiplier += 0.2; } },
        { name: 'Charge', desc: 'Projectile Size +20%', rarity: 'common', apply: (p) => { p.stats.projectileSizeMultiplier += 0.2; } }
    ],
    uncommon: [
        { name: 'Catalyst+', desc: 'Projectile Damage +4', rarity: 'uncommon', apply: (p) => { p.stats.projectileDamage += 4; } },
        { name: 'Cloak', desc: 'Invulnerability after hit +10% duration', rarity: 'uncommon', apply: (p) => { p.stats.invincibilityDurationMultiplier += 0.1; } },
        { name: 'Growth+', desc: 'Max. HP +20', rarity: 'uncommon', apply: (p) => { p.stats.maxHp += 20; p.hp += 20; } },
        { name: 'Gush', desc: 'Adds +1 Jump', rarity: 'uncommon', apply: (p) => { p.stats.maxJumps += 1; } },
        { name: 'Leech', desc: 'Life Steal of 3% Damage', rarity: 'uncommon', apply: (p) => { p.stats.lifesteal += 0.03; } },
        { name: 'Precision', desc: 'Critical deals +50% damage', rarity: 'uncommon', apply: (p) => { p.stats.critDamageMultiplier += 0.5; } },
        { name: 'Resonance+', desc: 'Attack Speed +24%', rarity: 'uncommon', apply: (p) => { p.stats.attackSpeedMultiplier -= 0.24; } },
        { name: 'Thunderbolt', desc: 'Calls 2 thunderbolts from the skies every few secs', rarity: 'uncommon', apply: (p) => { p.stats.hasThunderbolt = true; p.stats.thunderboltCount += 2; } },
        { name: 'Wound', desc: 'Damage applies bleeding to the enemy', rarity: 'uncommon', apply: (p) => { p.stats.hasBleed = true; } }
    ],
    epic: [
        { name: 'Appraisal', desc: '+1 item choice from now on', rarity: 'epic', apply: (p) => { p.stats.upgradeChoices += 1; } },
        { name: 'Barrier', desc: 'Creates a shield that blocks damage once every few seconds', rarity: 'epic', apply: (p) => { p.stats.hasBarrier = true; } },
        { name: 'Immortal', desc: '+1 Revive (kill all enemies when reviving)', rarity: 'epic', apply: (p) => { p.stats.revives += 1; } },
        { name: 'Will-O-Wisp', desc: 'Summons a wisp that fires with you', rarity: 'epic', apply: (p) => { p.stats.wispCount += 1; } }
    ]
};

// --- GAME CLASSES ---
class Entity {
    constructor(x, y, w, h) { this.x = x; this.y = y; this.w = w; this.h = h; this.vx = 0; this.vy = 0; }
}

class Player extends Entity {
    constructor(x, y) {
        super(x, y, 20, 40);
        this.stats = {
            maxHp: 100, speed: 5, jumpHeight: 14, projectileDamage: 5, attackCooldown: 300, critChance: 0.05,
            critDamageMultiplier: 1.5, projectileSizeMultiplier: 1, projectileHits: 1, maxJumps: 1, lifesteal: 0,
            hasBleed: false, invincibilityDurationMultiplier: 1, speedMultiplier: 1, jumpHeightMultiplier: 1,
            attackSpeedMultiplier: 1, soulOrbChance: 0, hasThunderbolt: false, thunderboltCount: 0,
            thunderboltCooldown: 5000, wispCount: 0, hasBarrier: false, barrierCooldown: 10000, revives: 0,
            upgradeChoices: 3, defense: 0
        };
        this.hp = this.stats.maxHp; this.jumpsLeft = this.stats.maxJumps; this.onGround = false; this.lastShotTime = 0;
        this.lastThunderboltTime = 0; this.lastBarrierTime = 0; this.isBarrierReady = true; this.isInvincible = false;
        this.invincibleTimer = 0; this.level = 1; this.exp = 0; this.expToNextLevel = 10; this.facing = 'right';
    }
    draw() {
        ctx.save();
        const headRadius = this.w / 2;
        const hatHeight = headRadius * 1.5; const hatWidth = headRadius * 2;
        ctx.fillStyle = 'white';
        ctx.beginPath();
        ctx.moveTo(this.x - hatWidth / 2, this.y - this.h);
        ctx.lineTo(this.x + hatWidth / 2, this.y - this.h);
        ctx.lineTo(this.x, this.y - this.h - hatHeight);
        ctx.closePath(); ctx.fill();
        ctx.beginPath(); ctx.arc(this.x, this.y - this.h, headRadius, 0, Math.PI * 2); ctx.fill();
        ctx.strokeStyle = 'white'; ctx.lineWidth = 4;
        ctx.beginPath(); ctx.moveTo(this.x, this.y - this.h); ctx.lineTo(this.x, this.y - this.h/2); ctx.stroke();
        ctx.beginPath(); ctx.moveTo(this.x, this.y - this.h/2); ctx.lineTo(this.x - 5, this.y); ctx.stroke();
        ctx.beginPath(); ctx.moveTo(this.x, this.y - this.h/2); ctx.lineTo(this.x + 5, this.y); ctx.stroke();
        const staffX = this.facing === 'right' ? this.x + 10 : this.x - 10;
        ctx.beginPath(); ctx.moveTo(staffX, this.y - this.h * 1.2); ctx.lineTo(staffX, this.y); ctx.stroke();
        ctx.beginPath(); ctx.arc(staffX, this.y - this.h * 1.2, 5, 0, Math.PI*2); ctx.fillStyle="cyan"; ctx.fill();
        if (this.stats.hasBarrier && this.isBarrierReady) {
            ctx.strokeStyle = 'cyan'; ctx.lineWidth = 3; ctx.beginPath();
            ctx.arc(this.x, this.y - this.h / 2, this.w * 1.5, 0, Math.PI * 2); ctx.stroke();
        }
        if (this.isInvincible) {
            ctx.globalAlpha = Math.random() * 0.5 + 0.3; ctx.fillStyle = '#ffcc00';
            ctx.beginPath(); ctx.arc(this.x, this.y - this.h / 2, this.w * 1.5, 0, Math.PI * 2); ctx.fill();
        }
        ctx.restore();
    }
    update() {
        this.vx = 0;
        if (keys['a'] || keys['ArrowLeft']) { this.vx = -this.stats.speed * this.stats.speedMultiplier; }
        if (keys['d'] || keys['ArrowRight']) { this.vx = this.stats.speed * this.stats.speedMultiplier; }
        
        const mouseWorldX = mousePos.x + (this.x - canvas.width / 2);
        this.facing = (mouseWorldX > this.x) ? 'right' : 'left';
        
        this.vy += GRAVITY; this.x += this.vx; this.y += this.vy; this.onGround = false;
        
        platforms.forEach(p => {
             if (this.x + this.w/2 > p.x && this.x - this.w/2 < p.x + p.w && this.y > p.y && this.y < p.y + p.h + this.h) {
                 if (this.vy > 0 && this.y - this.vy <= p.y) {
                    this.y = p.y; this.vy = 0; this.onGround = true; this.jumpsLeft = this.stats.maxJumps;
                }
            }
        });
        
        if (keys['mouse'] && Date.now() - this.lastShotTime > this.stats.attackCooldown * this.stats.attackSpeedMultiplier) { this.shoot(); this.lastShotTime = Date.now(); }
        if (this.stats.hasThunderbolt && Date.now() - this.lastThunderboltTime > this.stats.thunderboltCooldown) { for (let i = 0; i < this.stats.thunderboltCount; i++) { thunderbolts.push(new Thunderbolt(player.x + random(-canvas.width/2, canvas.width/2), 10)); } this.lastThunderboltTime = Date.now(); }
        if (this.stats.hasBarrier && !this.isBarrierReady && Date.now() - this.lastBarrierTime > this.stats.barrierCooldown) { this.isBarrierReady = true; }
        if (this.stats.wispCount > 0 && wisps.length < this.stats.wispCount) { wisps.push(new Wisp()); }
        if (this.isInvincible && Date.now() - this.invincibleTimer > 500 * this.stats.invincibilityDurationMultiplier) { this.isInvincible = false; }
        if (this.exp >= this.expToNextLevel) { this.levelUp(); }
    }
    jump() { if (this.onGround || this.jumpsLeft > 0) { this.vy = -this.stats.jumpHeight * this.stats.jumpHeightMultiplier; this.jumpsLeft--; } }
    shoot() { 
        const worldMouseX = mousePos.x + (this.x - canvas.width / 2);
        const worldMouseY = mousePos.y + (this.y - canvas.height / 2);
        const angle = Math.atan2((worldMouseY - (this.y - this.h)), (worldMouseX - this.x));
        const pSize = 5 * this.stats.projectileSizeMultiplier;
        projectiles.push(new Projectile(this.x, this.y - this.h, pSize, this.stats.projectileDamage, this.stats.projectileHits, this.stats.critChance, this.stats.critDamageMultiplier, this.stats.hasBleed, true, angle)); 
    }
    takeDamage(dmg) {
        if (this.isInvincible) return; if (this.stats.hasBarrier && this.isBarrierReady) { this.isBarrierReady = false; this.lastBarrierTime = Date.now(); return; }
        const actualDmg = dmg * (1 - this.stats.defense); this.hp -= actualDmg; this.isInvincible = true; this.invincibleTimer = Date.now();
        if (this.hp <= 0) { if (this.stats.revives > 0) { this.stats.revives--; this.hp = this.stats.maxHp / 2; enemies = []; } else { gameState = 'gameOver'; } }
    }
    levelUp() { this.level++; this.exp -= this.expToNextLevel; this.expToNextLevel = Math.floor(this.expToNextLevel * 1.5); gameState = 'levelUp'; chooseUpgrades(); }
    addExp(amount) { this.exp += amount; }
}

class Projectile extends Entity {
    constructor(x, y, size, damage, hits, critChance, critDmg, hasBleed, isPlayer, angle) {
        super(x, y, size, size); this.damage = damage; this.speed = 12; 
        this.vx = Math.cos(angle) * this.speed;
        this.vy = Math.sin(angle) * this.speed;
        this.hitsLeft = hits; this.isPlayer = isPlayer;
        this.color = `hsl(${random(0, 360)}, 100%, 70%)`; this.trail = []; this.canBleed = hasBleed; this.isCrit = Math.random() < critChance;
        if(this.isCrit) { this.damage *= critDmg; this.w *= 1.5; this.h *= 1.5; }
    }
    draw() {
        this.trail.forEach((p, i) => { ctx.fillStyle = this.color; ctx.globalAlpha = i / this.trail.length * 0.5; ctx.beginPath(); ctx.arc(p.x, p.y, this.w / 2 * (i / this.trail.length), 0, Math.PI * 2); ctx.fill(); });
        ctx.globalAlpha = 1; ctx.fillStyle = this.color; ctx.beginPath(); ctx.arc(this.x, this.y, this.w / 2, 0, Math.PI * 2); ctx.fill();
        if(this.isCrit){ ctx.strokeStyle = 'yellow'; ctx.lineWidth = 2; ctx.stroke(); }
    }
    update() { this.x += this.vx; this.y += this.vy; this.trail.push({x: this.x, y: this.y}); if (this.trail.length > 10) this.trail.shift(); }
}

class Enemy extends Entity {
    constructor() {
        const size = random(20, 35); super(player.x + random(-canvas.width * 0.7, canvas.width * 0.7), player.y - canvas.height, size, size);
        this.targetY = player.y - random(canvas.height * 0.4, canvas.height * 0.6);
        this.speed = (random(0.5, 1.5) + gameTime / 1000);
        this.hp = (5 + gameTime / 30) * Math.floor(this.w / 15); this.damage = 5 + Math.floor(gameTime / 60); this.expValue = Math.floor(this.w / 10);
        this.state = 'descending'; this.shootCooldown = random(2000, 4000); this.lastShotTime = Date.now(); this.bleedTicks = 0; this.bleedTimer = 0;
    }
    draw() {
        ctx.fillStyle = this.bleedTicks > 0 ? '#ff4d4d' : '#8B4513';
        ctx.fillRect(this.x - this.w / 2, this.y - this.h, this.w, this.h);
        ctx.fillStyle = '#f0e68c';
        ctx.beginPath(); ctx.arc(this.x, this.y - this.h, this.w/2, 0, Math.PI*2); ctx.fill();
        ctx.fillStyle = 'green'; ctx.fillRect(this.x - this.w / 2, this.y - this.h - 15, this.w * (this.hp / ((5 + gameTime / 30) * Math.floor(this.w / 15))), 5);
    }
    update() {
        if (this.state === 'descending') { this.y += this.speed; if (this.y > this.targetY) this.state = 'attacking'; }
        else if (this.state === 'attacking') { if (Date.now() - this.lastShotTime > this.shootCooldown) { this.shoot(); this.lastShotTime = Date.now(); } }
        if (this.bleedTicks > 0) { if (Date.now() - this.bleedTimer > 1000) { this.takeDamage(player.stats.projectileDamage * 0.1); this.bleedTicks--; this.bleedTimer = Date.now(); } }
    }
    shoot() { const angle = Math.atan2(player.y - this.y, player.x - this.x); projectiles.push(new EnemyProjectile(this.x, this.y, 8, this.damage, angle)); }
    takeDamage(dmg) { this.hp -= dmg; if (this.hp <= 0) { player.addExp(this.expValue); createExplosion(this.x, this.y, this.w); if(Math.random() < player.stats.soulOrbChance) orbs.push(new Orb(this.x, this.y)); } }
    applyBleed() { this.bleedTicks = 5; this.bleedTimer = Date.now(); }
}

class EnemyProjectile extends Entity {
    constructor(x, y, size, damage, angle){ super(x, y, size, size); this.damage = damage; this.speed = 4; this.vx = Math.cos(angle) * this.speed; this.vy = Math.sin(angle) * this.speed; }
    draw(){ ctx.fillStyle = '#696969'; ctx.beginPath(); ctx.arc(this.x, this.y, this.w, 0, Math.PI*2); ctx.fill(); ctx.strokeStyle = '#333'; ctx.stroke(); }
    update(){ this.x += this.vx; this.y += this.vy; }
}

class Particle extends Entity {
    constructor(x, y, color) { super(x, y, random(1, 3), random(1, 3)); this.vx = random(-2, 2); this.vy = random(-2, 2); this.life = 60; this.color = color; }
    draw() { ctx.fillStyle = this.color; ctx.globalAlpha = this.life / 60; ctx.fillRect(this.x, this.y, this.w, this.h); ctx.globalAlpha = 1; }
    update() { this.x += this.vx; this.y += this.vy; this.life--; }
}

class Thunderbolt {
    constructor(x, damage) { this.x = x; this.damage = damage; this.timer = 1000; this.width = 20; }
    draw() { if (this.timer > 0) { ctx.fillStyle = `rgba(255, 255, 0, ${0.2 + 0.3 * (1 - this.timer / 1000)})`; ctx.fillRect(this.x - this.width / 2, player.y - canvas.height, this.width, canvas.height * 2); } }
    update() {
        this.timer -= 1000 / 60;
        if (this.timer < 0 && this.timer > -100) {
            enemies.forEach(e => { if (e.x > this.x - this.width / 2 && e.x < this.x + this.width / 2) e.takeDamage(this.damage); });
            for (let i = 0; i < 50; i++) particles.push(new Particle(this.x + random(-10, 10), random(0, canvas.height), 'yellow'));
        }
    }
}

class Wisp {
    constructor() { this.x = player.x - 30; this.y = player.y - 30; this.lastShotTime = 0; }
    draw() { ctx.fillStyle = 'rgba(150, 200, 255, 0.8)'; ctx.beginPath(); ctx.arc(this.x, this.y, 8, 0, Math.PI * 2); ctx.fill(); }
    update() {
        this.x = lerp(this.x, player.x - 30 - 10 * wisps.indexOf(this), 0.1); this.y = lerp(this.y, player.y - 30, 0.1);
        const cooldown = (player.stats.attackCooldown / (1 + wisps.indexOf(this) * 0.5));
        if (Date.now() - this.lastShotTime > cooldown && keys['mouse']) { this.shoot(); this.lastShotTime = Date.now(); }
    }
    shoot(){
        const worldMouseX = mousePos.x + (player.x - canvas.width / 2);
        const worldMouseY = mousePos.y + (player.y - canvas.height / 2);
        const angle = Math.atan2((worldMouseY - this.y), (worldMouseX - this.x));
        const p = new Projectile(this.x, this.y, 4, player.stats.projectileDamage * 0.5, 1, 0, 1.5, false, true, angle); 
        projectiles.push(p);
    }
}

class Orb extends Entity {
    constructor(x, y) { super(x, y, 10, 10); this.type = 'heal'; this.value = 5; }
    draw(){ ctx.fillStyle = 'lime'; ctx.beginPath(); ctx.arc(this.x, this.y, this.w / 2, 0, Math.PI * 2); ctx.fill(); }
    update() { const angle = Math.atan2(player.y - this.y, player.x - this.x); this.x += Math.cos(angle) * 3; this.y += Math.sin(angle) * 3; }
}

// --- GAME LOGIC & LOOP ---
function createSimplePlatform() {
    platforms = [];
    platforms.push({ x: 0, y: canvas.height - 40, w: canvas.width, h: 40, type: 'wall' });
}

function chooseUpgrades() {
    upgradeScreen.style.display = 'flex'; upgradeChoicesContainer.innerHTML = ''; currentUpgradeChoices = [];
    let upgradePool = [...allUpgrades.common];
    if (player.level > 3) upgradePool.push(...allUpgrades.uncommon);
    if (player.level > 7) upgradePool.push(...allUpgrades.epic);
    for (let i = 0; i < player.stats.upgradeChoices; i++) {
        if (upgradePool.length === 0) break;
        const choiceIndex = Math.floor(random(0, upgradePool.length));
        const choice = upgradePool.splice(choiceIndex, 1)[0]; currentUpgradeChoices.push(choice);
        const optionDiv = document.createElement('div'); optionDiv.className = 'upgrade-option';
        optionDiv.innerHTML = `<h4>${choice.name}</h4><p>${choice.desc}</p><small>(${choice.rarity})</small>`;
        optionDiv.onclick = () => selectUpgrade(choice); upgradeChoicesContainer.appendChild(optionDiv);
    }
}

function selectUpgrade(choice) { choice.apply(player); gameState = 'playing'; upgradeScreen.style.display = 'none'; }
function createExplosion(x, y, size) { for (let i = 0; i < size / 2; i++) particles.push(new Particle(x, y, 'red')); }
function handleCollisions() {
    projectiles.forEach((proj, pIndex) => { if (proj.isPlayer) { enemies.forEach((enemy, eIndex) => { if (dist(proj.x, proj.y, enemy.x, enemy.y) < proj.w / 2 + enemy.w / 2) { enemy.takeDamage(proj.damage); if (player.stats.lifesteal > 0) player.hp = Math.min(player.stats.maxHp, player.hp + proj.damage * player.stats.lifesteal); if (proj.canBleed) enemy.applyBleed(); proj.hitsLeft--; if(proj.hitsLeft <= 0) projectiles.splice(pIndex, 1); if (enemy.hp <= 0) enemies.splice(eIndex, 1); } }); } });
    projectiles.forEach((proj, pIndex) => { if (!proj.isPlayer) { if(dist(proj.x, proj.y, player.x, player.y - player.h / 2) < proj.w/2 + player.w/2){ player.takeDamage(proj.damage); projectiles.splice(pIndex, 1); } } });
    orbs.forEach((orb, oIndex) => { if(dist(orb.x, orb.y, player.x, player.y - player.h/2) < orb.w/2 + player.w/2){ player.hp = Math.min(player.stats.maxHp, player.hp + orb.value); orbs.splice(oIndex, 1); } });
}

function updateGame() {
    if (gameState !== 'playing') return;
    gameTime++; player.update(); wisps.forEach(w => w.update());
    if (gameTime % Math.max(20, Math.floor(ENEMY_SPAWN_RATE_INITIAL - gameTime / 20)) === 0) enemies.push(new Enemy());
    enemies.forEach((e, i) => { e.update(); if (e.y > player.y + canvas.height) enemies.splice(i, 1); });
    projectiles.forEach((p, i) => { p.update(); if (p.y < player.y - canvas.height || p.y > player.y + canvas.height || p.x < player.x - canvas.width || p.x > player.x + canvas.width) projectiles.splice(i, 1); });
    particles.forEach((p, i) => { p.update(); if (p.life <= 0) particles.splice(i, 1); });
    thunderbolts.forEach((t, i) => { t.update(); if (t.timer < -100) thunderbolts.splice(i, 1); });
    orbs.forEach(o => o.update());
    handleCollisions();
}

function drawGame() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    if (player) {
        ctx.save();
        ctx.translate(-player.x + canvas.width / 2, -player.y + canvas.height / 2);
        
        platforms.forEach(p => { ctx.fillStyle = '#444'; ctx.fillRect(p.x, p.y, p.w, p.h); });
        player.draw();
        wisps.forEach(w => w.draw()); enemies.forEach(e => e.draw()); projectiles.forEach(p => p.draw());
        particles.forEach(p => p.draw()); thunderbolts.forEach(t => t.draw()); orbs.forEach(o => o.draw());

        ctx.restore();
    }
    
    if(gameState !== 'intro' && player){
        ctx.fillStyle = 'red'; ctx.fillRect(10, 10, 200, 20); ctx.fillStyle = 'lime'; ctx.fillRect(10, 10, 200 * (player.hp / player.stats.maxHp), 20);
        ctx.fillStyle = 'white'; ctx.font = '16px Courier New'; ctx.fillText(`${Math.ceil(player.hp)} / ${player.stats.maxHp}`, 15, 26);
        ctx.fillStyle = 'blue'; ctx.fillRect(10, 40, 200, 15); ctx.fillStyle = 'cyan'; ctx.fillRect(10, 40, 200 * (player.exp / player.expToNextLevel), 15);
        ctx.fillStyle = 'white'; ctx.fillText(`Lvl. ${player.level} (${Math.floor(player.exp)} / ${player.expToNextLevel})`, 15, 53);
    }
    
    if (gameState === 'gameOver') {
        ctx.fillStyle = 'rgba(0,0,0,0.7)'; ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctx.fillStyle = 'white'; ctx.font = '60px Courier New'; ctx.textAlign = 'center';
        ctx.fillText('GAME OVER', canvas.width / 2, canvas.height / 2);
        ctx.font = '30px Courier New';
        ctx.fillText('Click to restart', canvas.width / 2, canvas.height / 2 + 50);
    }
}

function gameLoop() {
    updateGame();
    drawGame();
    requestAnimationFrame(gameLoop);
}

function init() {
    createSimplePlatform();
    gameState = 'playing'; gameTime = 0;
    
    const groundY = canvas.height - 40;
    player = new Player(canvas.width / 2, groundY);

    enemies = []; projectiles = []; particles = []; wisps = []; thunderbolts = []; orbs = [];
    player.hp = player.stats.maxHp; player.exp = 0; player.level = 1; player.expToNextLevel = 10;
}

// --- STORY & INTRO ---
function showIntro() {
    introScreen.style.display = 'flex';
    playButton.style.display = 'none';
    const story = [
        "√â ver√£o e a cidade de Santos est√° cheia de mendigos fazendo sujeira...",
        "e o argentino Young n√£o gosta de mendigos, por isso escolheu voc√™ para expuls√°-los da cidade...",
        "Tome cuidado, pois eles jogam sacos de lixo em voc√™!"
    ];
    let currentLine = 0;

    function showNextLine() {
        if (currentLine < story.length) {
            introText.innerHTML = `<p>${story[currentLine]}</p>`;
            currentLine++;
            setTimeout(showNextLine, 3000);
        } else {
            playButton.style.display = 'block';
        }
    }
    showNextLine();
}

// --- EVENT LISTENERS ---
window.addEventListener('keydown', (e) => { keys[e.key.toLowerCase()] = true; if (e.key === ' ' && gameState === 'playing') player.jump(); });
window.addEventListener('keyup', (e) => { keys[e.key.toLowerCase()] = false; });
canvas.addEventListener('mousedown', (e) => { 
    keys['mouse'] = true; 
    if (gameState === 'gameOver') {
        gameState = 'intro';
        showIntro();
    }
});
canvas.addEventListener('mouseup', (e) => { keys['mouse'] = false; });
canvas.addEventListener('mousemove', (e) => {
    const rect = canvas.getBoundingClientRect();
    mousePos.x = (e.clientX - rect.left) * (canvas.width / rect.width);
    mousePos.y = (e.clientY - rect.top) * (canvas.height / rect.height);
});

playButton.addEventListener('click', () => {
    introScreen.style.display = 'none';
    init();
    if (!loopStarted) {
        loopStarted = true;
        gameLoop();
    }
});

// Start intro
showIntro();

</script>
</body>
</html>
